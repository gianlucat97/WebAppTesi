# This is a basic workflow to help you get started with Actions

name: Github Actions Maven Build Example

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout main branch from GitHub
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Step 2 - Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Step 3 - Have GitHub Actions Build Maven Project
        run: mvn -B package --file WebAppHooks/catalogoProdottiBoot/pom.xml
        
      - name: Step 4 - List the current directory
        run: ls -a

       # Runs a set of commands using the runners shell
      - name: Step 5 - Installare Node versione 10 in Ubuntu
        run: |
          sudo apt update
          sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash
          sudo apt install nodejs
          
          sudo npm cache clean -f
          sudo npm install -g n
          sudo n stable
          sudo n 10.18.0
          
          echo "Versione di node: "
          node -v
          echo "Versione di npm: "
          npm -v
          
          npm install
          echo "Provo ad INSTALLARE bcrypt"
          npm install bcrypt
          npm fund
          echo "vedi se ha fatto bene o no"
          
      - name: Step 6 - Unzip test-hooks ed installazione dentro test-guard di npm
        run: | 
          ls -a
          unzip test-hooks.zip
          cd test-hooks
          ls -a
          cd test-guard
          ls -a
          echo "Versione di node: "
          node -v
          echo "Versione di npm: "
          npm -v
          echo "Provo ad installare con npm install"
          npm install
          ls -a
          npm audit fix
          echo "Provo ad INSTALLARE bcrypt"
          npm install bcrypt
          npm fund
          echo "vedi se ha fatto bene o no"
    
      - name: Step 7 - Ottieni path file ftl da modificare con gli Hooks
        run: |
            cd WebAppHooks/catalogoProdottiBoot/src/main/resources/templates
            ls -a
            echo "Il path completo del file ftl da modificare Ã¨: "
            readlink -f indexProdottiOriginaleNoHooks.ftl
            echo "Vediamo il contenuto del file ftl prima della modifica"
            cat indexProdottiOriginaleNoHooks.ftl
              
        
      - name: Step 8 - Instrumenta l'applicazione iniettando gli Hooks
        run: |
            cd test-hooks
            cd test-guard
            ls -a
            echo "Visualizzazione file ftl prima dell injection! "
            cat /home/runner/work/WebAppTesi/WebAppTesi/WebAppHooks/catalogoProdottiBoot/src/main/resources/templates/indexProdottiOriginaleNoHooks.ftl
            echo "Visualizza versione di node"
            node -v
            echo "... Cancellazione e successivo aggiornamento di node_modules ..."
            rm -rf node_modules/
            npm update
            echo "INJECTION adesso..."
            echo "Visualizza versione di node"
            node -v
            node main.js inject-hooks /home/runner/work/WebAppTesi/WebAppTesi/WebAppHooks/catalogoProdottiBoot/src/main/resources/templates/indexProdottiOriginaleNoHooks.ftl --grammar freemarker
            echo "Visualizzazione file ftl dopo l'injection!!! "
            cat /home/runner/work/WebAppTesi/WebAppTesi/WebAppHooks/catalogoProdottiBoot/src/main/resources/templates/indexProdottiOriginaleNoHooks.ftl
     
      - name: Step 9 - Esegui Applicazione Spring Boot tramite jar
        run:  |
            cd WebAppHooks/catalogoProdottiBoot/target
            java -jar catalogoProdottiBoot-0.0.1-SNAPSHOT.jar &
            echo "Vediamo se si attiva il thread e mi fa anda avanti nell'esecuzione dei job"
            
      - name: Step 10 - Install Chrome Headless
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get -u dist-upgrade
          sudo apt-get install -y libappindicator1 fonts-liberation
          sudo apt-get -y install dbus-x11 xfonts-base xfonts-100dpi xfonts-75dpi xfonts-scalable
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get -f install
          google-chrome-stable --headless --disable-gpu 
          
      
            
      - name: Step 11 - Eseguire test maven
        run:  |
            echo "Provo ad eseguire un test"
            mvn -Dtest=testSuiteHooks test   
 
