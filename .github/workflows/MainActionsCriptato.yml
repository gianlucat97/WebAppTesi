# This is a basic workflow to help you get started with Actions

name: Github Actions Maven Build Example

# Controls when the workflow will run
on:
  release:
    types: [published]
          


 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: envForGithubActions
    
      
   # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout main branch from GitHub
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Step 2 - Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      - name: Step 2.2 - Visualizzare tag corrente
        run: |
          echo "Vediamo il tag corrente:"
          echo "${GITHUB_REF#refs/heads/}"
          
      - name: Step 3 - Have GitHub Actions Build Maven Project
        run: mvn -B package --file ${{ secrets.FILE_POM_MAIN_PROJECT }}
         
      - name: Step 4 - List the current directory
        run: |
          ls -a
          cd chromedriver_v94_linux64
          readlink -f chromedriver
       # Runs a set of commands using the runners shell
       
      - name: Step 5 - Installare Node versione 10 in Ubuntu
        run: |
          sudo apt update
          sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates
          curl -sL https://deb.nodesource.com/setup_10.x | sudo bash
          sudo apt install nodejs
          
          sudo npm cache clean -f
          sudo npm install -g n
          sudo n stable
          sudo n 10.18.0
          
          echo "Versione di node: "
          node -v
          echo "Versione di npm: "
          npm -v
          
          npm install
          echo "Provo ad INSTALLARE bcrypt"
          npm install bcrypt
          npm fund
          echo "vedi se ha fatto bene o no"
          
      - name: Step 6 - Unzip test-hooks ed installazione dentro test-guard di npm
        run: | 
          ls -a
          unzip test-hooks.zip
          cd test-hooks
          ls -a
          cd test-guard
          ls -a
          echo "Versione di node: "
          node -v
          echo "Versione di npm: "
          npm -v
          echo "Provo ad installare con npm install"
          npm install
          ls -a
          npm audit fix
          echo "Provo ad INSTALLARE bcrypt"
          npm install bcrypt
          npm fund
          echo "vedi se ha fatto bene o no" 
          
        
      - name: Step 7 - Instrumenta l'applicazione iniettando gli Hooks
        run: |
            cd test-hooks
            cd test-guard
            ls -a
            echo "Visualizzazione file ftl prima dell injection! "
            cat ${{ secrets.DIR_FILE_FTL }}
            echo "Visualizza versione di node"
            node -v
            echo "... Cancellazione e successivo aggiornamento di node_modules ..."
            rm -rf node_modules/
            npm update
            echo "INJECTION adesso..."
            echo "Visualizza versione di node"
            node -v
            node main.js inject-hooks ${{ secrets.DIR_FILE_FTL }} --grammar ${{ secrets.GRAMMAR_TYPE }}
            echo "Visualizzazione file ftl dopo l'injection!!! "
            cat ${{ secrets.DIR_FILE_FTL }}
            
      - name: Step 8 - Esecuzione script per lo split dei test html
        run: |
          ls -a
          echo "Rechiamoci nella directory dove si trova lo script test-script-splitter"
          cd test-hooks/test-guard
          ls -a
          echo "Proviamo ad eseguire lo script test-script-splitter"
          node test-script-splitter.js --suites /home/runner/work/WebAppTesi/WebAppTesi/TestSuite/TestSuiteHooks/TestHTML --dest /home/runner/work/WebAppTesi/WebAppTesi/TestSuite/TestSuiteHooks/TestHTML/ReportSplitter/ReportSplit --num 3
          echo "Script eseguito"
          cd /home/runner/work/WebAppTesi/WebAppTesi/TestSuite/TestSuiteHooks/TestHTML/ReportSplitter
          echo "Vediamo se ha generato le n cartelle ReportSplit"
          ls -a
          echo "Vediamo cosa c'è dentro ReportSplit0"
          cd ReportSplit0
          ls -a
          echo "Vediamo cosa c'è dentro ReportSplit1"
          cd ..
          cd ReportSplit1
          ls -a
          
        
          
          
      - name: Step 10 - Esegui Applicazione Spring Boot tramite jar
        run:  |
            cd ${{ secrets.DIR_JAR_MAIN_PROJECT }}
            echo "Vediamo quali file jar si trovano in cartella target"
            ls -a
            echo "Proviamo ad eseguire ${{ secrets.NOME_JAR_WEBAPP }}.jar"
            java -jar ${{ secrets.NOME_JAR_WEBAPP }}.jar &
            echo "Vediamo se si è attivato il thread che fa andare avanti"
    
          
      - name: Step 11 - Install Chrome Headless
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get -u dist-upgrade
          sudo apt-get install -y libappindicator1 fonts-liberation
          sudo apt-get -y install dbus-x11 xfonts-base xfonts-100dpi xfonts-75dpi xfonts-scalable
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get -f install
          google-chrome-stable --headless --disable-gpu 
          
          
      - name: Step 12 - Install Chrome Driver test maven
        run:  |
            wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /home/runner/work/WebAppTesi/WebAppTesi/chromedriver_v94_linux64/chromedriver
            sudo chown root:root /home/runner/work/WebAppTesi/WebAppTesi/chromedriver_v94_linux64/chromedriver
            sudo chmod +x /home/runner/work/WebAppTesi/WebAppTesi/chromedriver_v94_linux64/chromedriver
      
     
      - name: Step 13 - Update pom con esecuzione dei tesst
        run:  |
            sudo bash -c 'cat ${{ secrets.FILE_POM_TEST_MAIN_PROJECT }} > ${{ secrets.FILE_POM_MAIN_PROJECT }}'
            echo "Vediamo se il pom principale è stato sovrascritto"
            cat ${{ secrets.FILE_POM_MAIN_PROJECT }}
            
     
     
      - name: Step 14 - Eseguire test maven
        run:  |
            cd ${{ secrets.DIR_POM_MAIN_PROJECT }}
            mvn -Dtest=${{ secrets.TEST_TO_EXECUTE }}  test site &
            sleep 3m
            
      - name: Step 15 - Visualizzare report test
        run: |
            cd ${{ secrets.DIR_SUREFIRE_REPORTS }}
            ls -a 
            echo "Visualizziamo adesso tutti i report txt ottenuti dalle nostre test suite"
            cat *.txt
            echo "Fine visualizzazione report!!!"
            
      - name: Step 16 - Creazione directories per report testing
        run: |
          ls -a
          if [ ! -d "${{ secrets.DIR_TEST_SUITE }}" ]; then
            echo "Vedi se sono dentro l'if numero 1"
            sudo mkdir ${{ secrets.NOME_TEST_SUITE }}
          fi
          echo "Vediamo se ha creato la cartella"
          ls -a
          cd ${{ secrets.DIR_TEST_SUITE }}
          if [ ! -d "${{ secrets.DIR_TEST_SUITE_HOOKS  }}" ]; then
            echo "Vedi se sono dentro l'if numero 2"
            sudo mkdir ${{ secrets.NOME_TEST_SUITE_HOOKS }}
          fi
          cd ${{ secrets.DIR_TEST_SUITE_HOOKS }}
          if [ ! -d "${{ secrets.DIR_TEST_SUITE_HOOKS_STORICO }}" ]; then
            echo "Vedi se sono dentro l'if numero 3"
            sudo mkdir ${{ secrets.NOME_TEST_SUITE_HOOKS_STORICO }}
          fi   
       
       
      - name: Step 17 - Spostamento report in directory corretta
        run: |  
          cd ${{ secrets.DIR_JAR_MAIN_PROJECT }}
          echo "Visualizziamo se c'è la cartella surefire-reports"
          ls -a 
          echo "Rinominare la cartella surefire-reports in report_test_vx_x, dove al posto delle x va il numero della versione"
          sudo mv surefire-reports ${{ secrets.REPORT_DIRECTORYNAME_WITH_PROJECT_VERSION }}
          echo "Vediamo se la ha rinominata:"
          ls -a
          sudo cp -r ${{ secrets.REPORT_DIRECTORYNAME_WITH_PROJECT_VERSION }} ${{ secrets.DIR_TEST_SUITE_HOOKS_STORICO }}
          
      - name: Step 18 - Push dei report
        run: |
          echo "Vediamo quali cartelle ci sono nella directory di partenza"
          ls -a
          git status
          git config --global user.email "${{ secrets.EMAIL_ACCOUNT_GITHUB }}"
          git config --global user.name "${{ secrets.NOME_ACCOUNT_GITHUB }}"
          git config --global user.password "${{ secrets.PASSWORD_ACCOUNT_GITHUB }}"
          echo "Andiamo ad aggiungere la cartella dei report"
          git add ${{ secrets.DIR_TEST_SUITE }}
          echo "Cartella aggiunta!"
          git commit -m "${{ secrets.INFO_COMMIT_TEST_SUITE }}"
          git branch -M ${{ secrets.BRANCH_NAME }}
          git push -u origin ${{ secrets.BRANCH_NAME }}
          
      - name: Step 19 - Unzip progetto "Miglioramento report test"
        run: |
          ls 
          echo "Unzip del progetto"
          unzip miglioramentoReportTest.zip
          echo "Progetto zippato"
          ls 
          
          
          
      - name: Step 20 - Esecuzione progetto "Miglioramento report test"
        run: |    
          echo "Andiamo nella directory dove si trova il file jar eseguibile"
          cd miglioramentoReportTest/target
          ls -a
          echo "Proviamo ad eseguire il file jar, passandogli come args[0] la directory dei report da analizzare e come args[1] il nome del report complessivo xls da generare"
          java -jar miglioramentoReportTest-0.0.1-jarReportTest.jar ${{ secrets.DIR_TEST_SUITE_HOOKS_STORICO }}/${{ secrets.REPORT_DIRECTORYNAME_WITH_PROJECT_VERSION }} ${{ secrets.NOME_REPORT_FINALE }}
          echo "File jar eseguito!!!"
          echo "Vediamo il file xls di report unificato se c'è"
          ls -a 
          echo "Vediamo il contenuto del file xls di report unificato!!!"
          cat ${{ secrets.NOME_REPORT_FINALE.xls }}
          
      - name: Step 21 - Spostamento report xlsx in cartella dei report txt
        run: | 
          cd miglioramentoReportTest/target
          sudo cp ${{ secrets.NOME_REPORT_FINALE }}.xls ${{ secrets.DIR_TEST_SUITE_HOOKS_STORICO }}/${{ secrets.REPORT_DIRECTORYNAME_WITH_PROJECT_VERSION }}
          
      - name: Step 22 - Commit del report xlsx
        run: | 
          echo "Vediamo quali cartelle ci sono nella directory di partenza"
          ls -a
          git status
          git config --global user.email "${{ secrets.EMAIL_ACCOUNT_GITHUB }}"
          git config --global user.name "${{ secrets.NOME_ACCOUNT_GITHUB }}"
          git config --global user.password "${{ secrets.PASSWORD_ACCOUNT_GITHUB }}"
          echo "Andiamo ad aggiungere la cartella dei report"
          git add ${{ secrets.NOME_TEST_SUITE }}
          echo "Cartella aggiunta!"
          git commit -m "${{ secrets.INFO_COMMIT_TEST_SUITE }}"
          git branch -M ${{ secrets.BRANCH_NAME }}
          git push -u origin ${{ secrets.BRANCH_NAME }}
        
      
